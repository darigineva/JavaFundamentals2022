package MapsLambdaAndStreamAPI;

import java.util.*;
import java.util.stream.Collectors;

public class SnowWhite {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Map<String, Map<String, Integer>> dwarfColorNamePhysics = new LinkedHashMap<>();
        String[] input = scanner.nextLine().split(" <:> ");
        while (!input[0].equals("Once upon a time")){
            String color = input[1];
            String name = input[0];
            int physics = Integer.parseInt(input[2]);

            dwarfColorNamePhysics.putIfAbsent(color, new LinkedHashMap<>());
            dwarfColorNamePhysics.get(color).putIfAbsent(name, 0);
            dwarfColorNamePhysics.get(color).put(name, Math.max(physics, dwarfColorNamePhysics.get(color).get(name)));

            input = scanner.nextLine().split(" <:> ");
        }

        Map<String, Integer> output = new LinkedHashMap<>();
        int size = 0;
        for (Map.Entry<String, Map<String, Integer>> entry : dwarfColorNamePhysics.entrySet()) {
            size = entry.getValue().size();
            for (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {
            output.put("(" + entry.getKey() + ") " + entry1.getKey() + " <-> " + entry1.getValue(), Integer.parseInt(entry1.getValue() + size + ""));
            }
        }

        Map<String, Integer> sorted =
                output.entrySet().stream()
                        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                        .collect(Collectors.toMap(
                                Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

        for (Map.Entry<String, Integer> entryOutput : sorted.entrySet()) {
            System.out.println(entryOutput.getKey());
        }

    }
}
